=== 第一章 构造过程抽象 ===
 *计算过程* ：存在于计算机里的一类抽象事物，这些过程会去操作一些被称为数据的抽象事务。人们创建出一些称为程序的规则模式，以指导这些过程的进行。
 
=== 程序设计的基本元素 ===
1.基本表达形式
2.组合的方法
3.抽象的方法

==== 环境 ====
解释器维护某种存储能力，将值与符号关联，而后又能提取出这些值，这种存储被称为环境
eg (define pi 3.14159)

==== 组合式 ====
通用规则 (+ 1 2)求值

特殊形式 (define x 3) 不是将define应用于它的两个实际参数，这个并不是组合式

==== 组合式求值 ====
{{{scheme
(* (+ 2 (* 4 6))
    + 3 5 7) 
}}}
使用递归处理层次结构，这种计算过程称为树形积累

==== 复合过程procedure ====
(define square lamba(x) (* x x))
语法糖
(define (square x) (* x x))
一般形式
(define (<name> <formal parameters>) <body>)

==== 过程应用的代换模型 ====

===== 应用序 =====
	先求值参数而后应用，lisp采用此方法，因为可以避免对于表达式的重复求值
    
===== 正则序 =====
   	完全展开而后归约

==== 条件表达式和谓词 ====
===== condition表达式 =====
一般形式：
	(cond (<p1> <e1>)
		    (<p2> <e2>)
		    …
		     <pn> <en>)) 
求值方法：首先求值谓词<p1>，如果是false就去求<p2>，一直继续下去，直到发现某个谓词的值为真为止，此时解释器返回相应子句中的序列表达式<e>的值。

===== if表达式 =====
	一般形式
	(if <predicate> <consequent> <alternative>)
求值方法：求值<predicate>，如果为真，求值<consequent>并返回其值；否则求值<alternative>并返回其值。

==== 约束变量与自由变量 ====
	约束变量：过程的形参。一个过程的定义约束了它的所有形参
	自由变量：如果一个变量不是被约束的，那就称它为自由的。
	作用域：一个名字的定义被约束于的哪一级表达式称为这个名字的作用域
    
==== 内部定义和块结构 ====
	块结构：嵌套的定义
	词法作用域：要求过程中的自由变量实际引用外围过程定义中所出现的约束。
eg 原始：
{{{scheme
(define (sqrt x)
    (sqrt-iter 1.0 x))

(define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))
        
(define (good-enough? guess x)
    (< (abs (- (square guess x)) 0.001))
    
(define (improve guess x)
    (average guess (/ x guess)))
}}}
优化后
{{{scheme
(define (sqrt x)
    (define (good-enough? guess)
        (< (abs (- (square guess) x)) 0.001))
    (define (improve guess)
        (average guess (/ x guess)))
    (define (sqrt-iter guess)
        (if (good-enough? guess)
            guess
            (sqrt-iter (improve guess))))
    (sqrt-iter 1.0))
}}}

==== 递归与迭代过程 ====
	递归计算过程：构造起一个推迟进行的操作所形成的链条，收缩阶段表现为这些运算的实际执行，解释器需要维护那些以后将要执行的操作的信息。
	迭代过程：其状态可以用固定数目的状态变量描述的计算过程
    
==== 尾递归 ====
很多其他语言即使它描述的计算过程从原理上看是迭代的，如果不支持尾递归优化，消耗的存储量仍与过程调用的数目成正比。(因为递归调用的正常流程就是压栈，尾递归优化后，栈信息和实际的调用过程变得不一致，python、java语言等为了保留完成的堆栈信息，异常时抛出，所以没有做尾递归优化)
要在这些不支持尾递归优化的语言里描述迭代过程，就必须借助于特殊的循环结构，如do、repeat、until、for、while等。
scheme支持尾递归，总能在常量空间中执行迭代型计算过程，即使这一计算是用一个递归过程描述的。有了一个尾递归的实现，我们就可以利用常规的过程调用机制表示迭代，这也会使各种复杂的专用迭代结构变成只是一些语法糖了。

[尾调用优化 - 阮一峰的网络日志 | http://www.ruanyifeng.com/blog/2015/04/tail-call.html]

练习：函数f由如下规则定义：如果n<3, 那么f(n)=n, 如果n>=3, 那么f(n) = f(n-1)+2f(n-2)+3(f(n-3)),写一个递归计算过程和迭代计算过程

{{{ scheme
(define (f n)
  (if (<= n 3) n
      (+ (f (- n 1)) (* 2(f (- n 2))) (* 3(f (- n 3))))))

(define (ff n)
  (inloop n 3 2 1 4))

(define (inloop n a b c count)
  (if (<= n 3) n
      (if (= count n)
          (+ a (* 2 b) (* 3 c))
          (inloop n (+ a (* 2 b) (* 3 c)) a b  (+ count 1)))))
}}}

=== 用高阶函数做抽象 ===
==== 高阶过程 ====
以过程作为参数或以过程作为返回值的过程

==== 用lambda构造过程 ====
(lambda (<formal-parameters>) <body>)
与define创建的过程不同之处在于，这种过程没有和环境中的任何名字相关联

匿名过程的定义与调用与其他过程类似，eg.普通过程 
define (square lambda(x) (* x x) )
(square 2)

匿名过程
(lambda(x) (* x x)  2)
相当于把名字代换成了过程具体的定义

==== 用let创建局部变量 ====
(let ((<var1> <exp1>)
	(<var2> <exp2>)
	…
	(<var_n> <exp_n>))
	<body>)
实际被解释为：
((lambda (<var1>…<var_n>)
	<body>)
<exp1>
…
<exp_n>)
因此解释器不需要为提供局部变量增加任何新机制，let只是lambda表达式的语法糖

==== 第一级元素 ====
一般而言，程序设计语言总会对计算元素的可能使用方式强加上某些限制，带有最少限制的元素被称为具有第一级的状态，第一级元素的某些“权利或特权包括”
	+ 可以用变量命名
	+ 可以提供给过程作为参数
	+ 可以由过程作为结果返回
	+ 可以包含在数据结构中
Lisp给了过程完全的第一级状态。
