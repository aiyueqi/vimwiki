= class文件结构 =
Class文件是一组以8字节为基础单位的二进制流，中间没有添加任何分隔符
Class文件格式采用一种类似于C语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：
- 无符号数: 基本数据类型，以u1, u2, u4, u8分别代表1，2，4，8个字节的无符号数,用来描述数字，索引引用，数量值或是utf8编码构成的字符串值
- 表: 由多个无符号数或其他表作为数据项构成的复合数据类型，以"_info"结尾，用于描述有层次关系的复合结构的数据，整个Class文件本质上就是一张表

由于Class文件没有分隔符，当需要描述同一类型但数量不定的多个数据时，使用一个前置的容量计数器加若干个连续的数据项的形式，称这一系列连续的某一类型的数据为某一类型的集合

== 魔数 ==
class文件的开头4个字节，用来确定文件是否能被虚拟机接受，并且确定jdk版本

== 常量池 ==
常量池是Class文件结构中与其他项目关联最多的数据类型，也是占用class文件空间最大的数据项目之一

由于常量池中常量的数量是不固定的，所以在常量池的入口需要放置一项u2类型的数据，代表长两次容量计数值

常量池中的每一项常量都是一个表，共有11种结构各不相同的表结构数据，表开始的第一位都是一个u1类型的标志位tag，代表这个常量属于哪种常量类型。
{{html/images/jvm1.png}}

可以使用javap工具输出Class文件的的字节码内容
{{{
    javap -verbose xxx
}}}
=== 字面量 ===
- 文本字符串
- final常量
等等

=== 符号引用 ===
- 类和接口的全限定名 Fully Qualified Name
- 字段的名称和描述符 Descriptor
- 方法的名称和描述符

== 访问标志 ==
常量池结束后的2个字节代表访问标志，包括：此class是类or接口，public,abstarct,final等

== 类索引、父类索引与接口索引集合 ==
Class文件中由这三项数据来确定这个类的继承关系, 按顺序排列在访问标志之后。类索引和父类索引都为u2类型的索引值表示，他们各自指向一个类型为CONSTANT_Class_info的类描述符常量，通过CONSTANT_Class_info类型的常量中的索引值，可以找到定义在CONSTANT_Utf8_info类型的常量中的全限定名字符串, 接口索引为一组u2类型的数据的集合

== 字段表集合 ==
字段表field_info用于描述接口或类中声明的变量，字段filed包括了类级变量或实例级变量，但不包括在方法内部声明的变量。描述一个字段需要包含的信息：
access_flags:
- 字段的作用域（public，private， protected等）
- 类级or实例级变量（static修饰符）
- 可变性（final）
- 并发可见性（volatile，是否强制从主内存读写）
- 可否序列化（transient）
- 字段数据类型（基本类型，对象，数组）
- 字段名称
这些信息都是bool值，用标志位来表示，而字段名称，字段的数据类型无法固定，需要引用常量池中的常量来描述

字段表的最终格式：
{{html/images/jvm2.png}}
其中：
- name_index 代表字段的简单名称，是对常量池的引用
- descriptor_index 代表字段和方法的描述符，也是对常量池的引用

三种特殊字符串的概念
- 类和接口的全限定名：如org/fenixsoft/clazz/TestClass 仅仅把类全名中的"."替换成了"/"，";"表示全限定名结束
- 简单名称：没有类型和参数修饰的方法或字段名称
- 方法和字段的描述符：描述字段的数据类型，方法的参数列表（包括数量、类型以及顺序）和返回值。基本数据类型及代表无返回值的void类型都用一个大写字符来表示，对象类型用L加对象的全限定名来表示，如下表
{{html/images/jvm3.png}}
- 对于数组类型，每一维度使用一个前置的“[”字符描述
 eg.java.lang.String[][] -> [[Ljava/lang/String;
 eg.int[] -> [I
 
- 参数列表按照参数的严格顺序放在一组小括号()之内 
- 字段表集合不会列出从父类或接口中继承而来的字段，但有可能列出原本java代码中不存在的字段，如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。

== 方法表集合 ==
Class文件存储格式对方法的描述与对字段的描述几乎完全一致，区别如下：
- 去掉了volatile, transient关键字
- 增加了synchronized, native, strictfp, abstract关键字

方法里的java代码，经过编译器编译成字节码指令之后，存放在方法属性表集合中名为Code的属性中。

== 属性表集合 ==
属性表attribute_info，与Class文件中其他的数据项目要求严格的顺序，长度和内容不同，属性表集合的限制较宽松，不再要求各个属性表有严格的顺序。
只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写入自己定义的属性信息。
java虚拟机运行时会忽略掉它不认识的属性，以下为9项虚拟机实现应当能识别的属性
{{html/images/jvm4.png}}

Code属性表的结构
{{html/images/jvm5.png}}
