= java内存模型 =

== java内存模型的抽象结构 ==
java中所有实例域，静态域和数组元素都存储在堆内存中，堆内存在线程之间共享。
java线程之间的通信由java内存模型(JMM)控制。
JMM定义了线程和主内存之间的抽象关系。

=== 本地内存 ===
线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。
JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证

=== 重排序 ===
从源码到最终执行的指令序列的过程
源代码 -> 1.编译器优化重排序 -> 2.指令级并行重排序 -> 3.内存系统重排序 -> 最终执行的指令序列

由于写缓冲区（cpu的高速缓存）仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。现代的处理器都会使用写缓冲区，因此现代的处理器都会允许写-读操作进行重排序

=== 内存屏障 ===
java编译器在生成指令序列的适当位置会插入内存屏障指令，来禁止特定类型的处理器重排序

=== happens-before ===
如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系
- 程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作
- 监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁
- volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读
- 传递性：如果A happens-before B，且B happens-before C，那么A happens before C

注：两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行，仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按 顺序排在第二个操作之前。

== 重排序 ==
=== 数据依赖性 ===
针对单个处理器中执行的指令序列和单个线程中执行的操作，编译器和处理器在重排序时，会遵守数据依赖性，编译器和处理器不会改变存在数据依赖关系的两个操作的执行顺序。
不同处理器之间和不同线程之间的数据依赖性不被编译器和处理器考虑

== 顺序一致性 ==
=== 顺序一致性内存模型 ===
1.一个线程中的所有操作必须按照程序的顺序来执行
2.（不管程序是否同步）所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有的线程可见

JVM在堆上分配对象时，首先会对内存空间进行清零。

== volatile的内存语义 ==
可以把volatile变量的单个读/写，看成是使用同一个锁对这些单个读/写操作做了同步。
下面两个程序在语义上等价
注：以下getAndIncrement会有并发问题，未保证原子性
{{{ java
class VolatileFeaturesExample {
	volatile long v1 = 0L;
	
	public void set(long l) {
		v1 = 1;
	}

	public void getAndIncrement () {
		v1++;
	}

	public long get() {
		return v1;
	}
}
}}}
{{{ java
class VolatileFeaturesExample {
	long v1 = 0L;
	
	public synchronized void set(long l) {
		v1 = 1;
	}

	public void getAndIncrement () {
		long temp = get();
		temp += 1L;
		set(temp);
	}

	public synchronized long get() {
		return v1;
	}
}
}}}

=== volatile变量自身的特性 ===
- 可见性：对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写入
- 原子性：对任意单个volatile变量的读/写具有原子性，但类似于volatile++这种复合操作不具有原子性

volatile变量的写-读 与 锁的释放-获取 有相同的语义

== 锁的释放和获取的内存语义 ==
=== 线程释放锁 ===
JMM会把该线程对应的本地内存中的共享变量刷新到主内存中

=== 线程获取锁 ===
JMM会把该项城对应的本地内存置为无效，使得被监视器保护的临界区代码必须从主内存中读取共享变量

=== CAS:compareAndSet方法 ===
如果当前状态值等于预期值，则以原子方式将同步状态设置为给定的更新值。此操作具有volatile读和写的内存语义。
编译器不会对volatile读与volatile读后面的任意内存操作重排序；不会对volatile写和volatile写前面的任意内存操作重排序

=== AQS:AbstractQueuedSynchronizer ===
非阻塞数据结构和原子变量类

=== 其他 ===
线程调度
java抢占式，lua协同例程：协同式

can compare and set 乐观锁 aba问题
