== 进程 ==
对正在运行程序的一个抽象

每个进程有一个地址空间和一个控制线程

资源管理的单位
=== 进程的三种状态 ===
1. 运行态
2. 就绪态
3. 阻塞态

== 线程 ==
同一个进程中的不同线程有完全一样的地址空间, 有共享的堆和私有的栈空间

轻量级

CPU调度的最小单位

=== 在用户空间中实现线程 ===
多线程由函数库实现, 对操作系统不可见
1. 优点：
    - 线程切换快
    - 可扩展性强
2. 缺点：
    - 不易实现阻塞系统调用
    - 没有时钟中断，所以不可能用轮转调度的方法调度线程,如果一个线程开始运行，那么在该进程中的其他线程就不能运行，除非第一个线程自动放弃CPU

=== 在内核中实现线程 ===
多线程的支持由操作系统实现
内核的线程表保存了每个线程的寄存器、状态和其他信息。
1. 优点:
    - 所有能够阻塞线程的调用都以系统调用的形式实现，当一个线程阻塞时，内核根据其选择，可以运行同一个进程中的另一个线程或者另一个进程中的线程。而在用户级线程中，运行时系统时钟运行自己进程中的线程，知道内核剥夺他的CPU为止
2. 缺点：
    - 陷入内核态系统调用的开销比较大

=== 混合实现 ===


== 协程 ==

要处理上述的两个问题：
1. 遇到阻塞式I\O会导致整个进程被挂起
2. 由于缺乏时钟阻塞，进程需要自己拥有调度线程的能力

如果一种实现使得每个线程需要自己通过调用某个方法，主动交出控制权，那么我们就称这种用户态线程是协作式的，即协程

协程大致可以理解为：用户态实现的线程

线程和协程最大的区别就是是否依赖CPU时钟发出的中断来调度

多进程+协程实现多核调用, 实际上一个进程中同时只有一个协程在执行，即协程其实是单线程执行的
