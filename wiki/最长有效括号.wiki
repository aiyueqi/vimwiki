= 32最长有效括号 =
== 题目描述 ==
给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。

== 分析思路 ==
由于题中只有"(", ")"两种输入，考虑到嵌套括号的情况，想到用栈：
如果是"("就入栈，如果是")"就出栈，下面加一些具体规则

解决了"(())"这种情况，但是失配的情况很难处理，如：
"()()", "())()", "()(()":
第一种匹配到就累加没问题

第二种需要加一条规则：出栈时发现栈空了就重新计数

第三种比较难处理，我们尝试为左括号失配加规则，比较"()(()"和"()(())"，由于左括号是否有效要看最后是否存在有效的右括号，规则比较难加。

然后我就放弃栈，改用循环处理下标了。

=== 解法一：循环 ===
先总结下用循环处理下标的解法：
维护一个数组A，存储以当前括号为结尾的最长有效括号长度。
遍历存储括号的字符串s，如果s[i]="("，A[i]=0; 否则读取A[i-1]的值，
1. 考虑嵌套情况：跳过过已经成功匹配的括号，index=A[i-1-A[i-1]]是此右括号该匹配的下标，如果s[index]='('即成功匹配，A[i] = A[i-1]+2 （这里有下标越界的情况编码时需要处理，这里不讨论）
2. 考虑相邻情况：如"()(())"，最后一位成功匹配后，长度需要加上相邻括号的长度，即如果s[index]成功匹配，需要加上s[index-1]的长度
3. 以上两条规则，对于s[i]='('的情况，和失配的情况，A[i]=0，都满足，因此不需做特殊处理

代码如下：
{{{python
class Solution:
    def longestValidParentheses(self, s: str) -> int:
        length = len(s)
        A = [0] * length
        for i in range(1, length):
            if s[i] == '(':
                continue

            index = i-1-A[i-1]
            if index < 0 or s[index] != '(':
                A[i] = 0
                continue

            A[i] = A[i-1] + 2

            if index-1 >= 0:
                A[i] = A[i] + A[index-1]

        result = 0
        for i in range(0, length):
            result = max(result, A[i])

        return result
}}}

=== 解法二：用栈 ===
对比两种方法，如果能用栈存储下标的话，省去了手动移动下标的麻烦
对于失配的情况，只要重新计数就ok
leetcode的解答中有一个很巧妙的方法，栈里面存放的是")"的下标，遇到"("就入栈，遇到")"就出栈；巧妙的地方在于：在栈底永远保留一个失配元素的下标
在栈底永远保留一个元素，初始化为某个值，s[i]=')'，出栈之后栈为空，即栈底元素被出栈，意味着发生了失配，此时把i入栈作为新的栈底元素，当前以i结尾的最长有效括号长度是i-stack[-1]
总结一下意义：
- 栈底元素：失配元素的下标
- 栈顶元素：目前还未成功匹配，下一个可能成功匹配的左括号下标（不包括栈底元素）
- 当前元素下标-栈顶元素下标：以当前元素为结尾的最长有效括号长度

代码如下：
{{{python
class Solution:
    def longestValidParentheses(self, s: str) -> int:
        if not s:
            return 0
        res = 0
        stack = [-1]
        for i in range(len(s)):
            if s[i] == "(":
                stack.append(i)
            else:
                stack.pop()
                if not stack:
                    stack.append(i)
                else:
                    res = max(res,i - stack[-1])
        return res
}}}
