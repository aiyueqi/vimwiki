= Scala函数式编程--序 =
== Lua中的协程 ==
Lua的作者把协程称为“单趟延续执行流”，有了协程或者延续执行流，程序员可以手动切换执行流，不再需要编写事件回调函数，可以编写直接命令式风格代码但不阻塞真正的线程

== 函数式编程的技巧和模式 ==
不同于面向对象里面常见的设计模式，它多是从类型系统的角度去抽象的

== Scala的发展 ==
Scala所取得的成功，主要归功于它抓住了互联网的快速发展，大数据的兴起，以及部分软件企业的产业升级等基于（在大数据领域，scala已经成为明星语言），这些领域的发展对语言提出了新的要求：提升生产力，满足高并发、高性能及高度抽象，Scala正好都可以满足
Scala内置了很多设计模式（以语法糖的方式），也吸取了很多其他编程语言已经被验证的优点，如类型推到、模式匹配等，极大的简化了开发过程中所要写的代码量（相对于java）。
此外，得益于JVM本身强大的威力，加上编译器的一些优化，使它在运行时的效率与java并没有太大的差距

== Scala的优点： ==
- 过渡平滑，立足于jvm并将函数式融入面向对象
- 和C++类似，多范式语言，不熟悉函数式编程的scala初学者，随时可以安全的回退，转用熟悉的命令式面向对象范式编程，从而保证交付速度

== Scala是不纯粹的函数式编程语言 ==
同时承认非纯粹函数和纯函数

