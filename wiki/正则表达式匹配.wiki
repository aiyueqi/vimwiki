= 10正则表达式匹配 =
== 题目描述 ==
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
- '.' 匹配任意单个字符
- '*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。
https://leetcode-cn.com/problems/regular-expression-matching/

== 解题思路 ==
1. *符号的存在使得读取字符时要读相邻的两个，因为有可能匹配前面的字符0次；同时也使得s和p的长度可以不同
2. *符号也使得匹配有可能需要回溯，如p=b*b*b, s=b或p=bbbb
3. 根据回溯的特性，考虑维护一个二维数组A，存储此字符能匹配到的p中所有位置的下标，A[i]可以由A[i-1],s,p得到，使用dp求解
4. 定义：
    - A[i] 是一个集合，存储的是所有能成功匹配s[0~i]的p中的下标
    - 计算A[i+1] 从p[A[i][]]的下一位匹配, 成功即往A[i+1]中添加元素
    - 匹配规则：
        - 初始化 
            - A[-1] = 0
        - 循环
            - j = A[i][] 
            - if(p[j]) != "*": 匹配p[j+1] 与 s[i+1]
            - else 匹配p[j] 与 s[i+1], 匹配p中下一位不等于"*"的与s[i+1]
            - 一旦s[i+1]匹配成功，向数组中加入元素
        - 结束
            - s到结尾，成功条件：p也到结尾或者p之后的均为"*"  
            - s到一半集合为空，匹配失败
5. 复杂度分析：
    设s的长度为n, p的长度为m
    时间复杂度：O(m*n)
    空间复杂度：O(m*n), 可以优化为O(m)
