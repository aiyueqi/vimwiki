= 10正则表达式匹配 =
== 题目描述 ==
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
- '.' 匹配任意单个字符
- '*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。
https://leetcode-cn.com/problems/regular-expression-matching/

== 解题思路 ==

=== 方法一 ===
遍历s，匹配p
{{{python
from typing import *

#遍历s，与p作比较
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        n = len(s)
        m = len(p)
        #下一个要匹配的p中的下标
        A = [[False] * (m+1) for i in range(0, 2)]
        A[1][0] = True

        flag = 1
        for i in range(0, n):
            flag = 1-flag
            for j in range(0, m+1):
                A[flag][j] = False
            for j in range(0, m):
                if A[1-flag][j] == False:
                    continue
                self.update(j, s[i], p, A, flag, m)
#            print(A[flag])

        #结尾是x*y*z*的情况
        if A[flag][m]:
            return True
        index = m-1
        while index>=0:
            if A[flag][index]:
                break
            index -= 1
        result = False
        while index>=0 and index<m:
            if index+1<m and p[index+1]=="*":
                result = True
                index += 2
            else:
                return False
        return result

    def update(self, j, ss, p, A, flag, m):
        if j >= m:
            return
        if j+1 == m or p[j+1] != "*":
            A[flag][j+1] = A[flag][j+1] or self.success(ss, p[j])
            return
        A[flag][j] = A[flag][j] or self.success(ss, p[j])
        self.update(j+2, ss, p, A, flag, m)

    def success(self, ss, pp):
        if pp == ".":
            return True
        return ss == pp

s = Solution()
print(s.isMatch("mississippi", "mis*is*p*."))
}}}


=== 方法二 ===
遍历p,  匹配s
{{{python
from typing import *

# 遍历p，与s作比较
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        m = len(s)
        n = len(p)
        lastset = {-1}

        for i in range(0, n):
            if p[i] == "*":
                continue
            newset = set()
            if (i+1)<n and p[i+1] == '*':
                #匹配多个
                newset = lastset.copy()
                self.loop(lastset, newset, p[i], s, True, m)

            else:
                #匹配一个
                self.loop(lastset, newset, p[i], s, False, m)
            lastset = newset
            print(lastset)
        return m-1 in lastset

    def loop(self, lastset, newset, pp, s, star, m):
        for j in lastset:
            index = j+1
            if index >= m:
                continue
            if star:
                while index<m and self.match(s[index], pp):
                    newset.add(index)
                    index += 1
            else:
                if self.match(s[index], pp):
                    newset.add(index)

    def match(self, ss, pp):
        if pp == '.':
            return True
        return ss == pp

s = Solution()
print(s.isMatch("mississippi", "mis*is*ip*."))
}}}

=== 方法三 ===
递归求解
其中，i为s下标，j为p下标
dp(i,j) 定义为从s[i], p[j]开始匹配，是否能匹配到结尾

dp(i,j) = dp(i+1, j+1) 下一位不是*

dp(i,j) = dp(i,j+2) or (s[i]与p[j]匹配 and dp(i+1,j)) 下一位是*
        
{{{python
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        memo = dict() # 备忘录
        def dp(i, j):
            if (i, j) in memo: return memo[(i, j)]
            if j == len(p): return i == len(s)

            first = i < len(s) and p[j] in {s[i], '.'}

            if j <= len(p) - 2 and p[j + 1] == '*':
                ans = dp(i, j + 2) or first and dp(i + 1, j)
            else:
                ans = first and dp(i + 1, j + 1)
            
            memo[(i, j)] = ans
            return ans
    
        return dp(0, 0)
}}}

